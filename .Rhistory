reticulate::py_available()
reticulate::py_install("lineus")
?initialize()
usethis::use_readme_md()
install.packages("devout")
devtools::install_github("coolbutuseless/devout")
x  <- plot(iris)
str(x)
?plot
library(devout)
devout::ascii(iris)
p
dev.cur()
plot(iris)
invisible(dev.off())
debug_function <- function(device_call, args, state) {
if (device_call %in% c('mode', 'strWidthUTF8', 'metricInfo')) return()
cat("[", device_call, "]: ")
cat(paste(names(args), args, sep = " = ", collapse = ",  "), "\n", sep = "")
}
rdevice(debug_function)
plot(1:10)
invisible(dev.off())
rdevice(debug_function)
rdevice(debug_function)
p
plot(iris)
plot(iris$Sepal.Length,iris$Sepal.Width)
devtools::load_all()
scale_value(1 canvas = 0:4)
dev.off()
scale_value(1, canvas = 0:4)
scale_value(canvas = 0:4)
scale_value(x=1, canvas = 0:4)
scale_value(y=1, canvas = 0:4)
debug(scale_value)
scale_value(y=1, canvas = 0:4)
scale_value(y=1, canvas = 0:4)
limits
out <- ((limits[2]-limits[1])*(val - range[1])/(range[2]-range[1]))+limits[1]
(limits[2]-limits[1])
(val - range[1])
(range[2]-range[1])
scale_value(y=2.5, canvas = 0:3)
devtools::load_all()
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
warnings()
plot(iris$Sepal.Length,iris$Sepal.Width)
devtools::load_all()
plot(iris$Sepal.Length,iris$Sepal.Width)
warnings()
devtools::load_all()
dev.off()
devtools::load_all()
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Sepal.Width)
dev.off()
plot(iris$Sepal.Length,iris$Sepal.Width)
devtools::load_all()
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
devtools::load_all()
devtools::load_all()
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Sepal.Width)
dev.off
dev.off()

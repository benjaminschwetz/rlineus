reticulate::py_available()
reticulate::py_install("lineus")
?initialize()
usethis::use_readme_md()
install.packages("devout")
devtools::install_github("coolbutuseless/devout")
x  <- plot(iris)
str(x)
?plot
library(devout)
devout::ascii(iris)
p
dev.cur()
plot(iris)
invisible(dev.off())
debug_function <- function(device_call, args, state) {
if (device_call %in% c('mode', 'strWidthUTF8', 'metricInfo')) return()
cat("[", device_call, "]: ")
cat(paste(names(args), args, sep = " = ", collapse = ",  "), "\n", sep = "")
}
rdevice(debug_function)
plot(1:10)
invisible(dev.off())
rdevice(debug_function)
rdevice(debug_function)
p
plot(iris)
plot(iris$Sepal.Length,iris$Sepal.Width)
devtools::load_all()
scale_value(1 canvas = 0:4)
dev.off()
scale_value(1, canvas = 0:4)
scale_value(canvas = 0:4)
scale_value(x=1, canvas = 0:4)
scale_value(y=1, canvas = 0:4)
debug(scale_value)
scale_value(y=1, canvas = 0:4)
scale_value(y=1, canvas = 0:4)
limits
out <- ((limits[2]-limits[1])*(val - range[1])/(range[2]-range[1]))+limits[1]
(limits[2]-limits[1])
(val - range[1])
(range[2]-range[1])
scale_value(y=2.5, canvas = 0:3)
devtools::load_all()
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
warnings()
plot(iris$Sepal.Length,iris$Sepal.Width)
devtools::load_all()
plot(iris$Sepal.Length,iris$Sepal.Width)
warnings()
devtools::load_all()
dev.off()
devtools::load_all()
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Sepal.Width)
dev.off()
plot(iris$Sepal.Length,iris$Sepal.Width)
devtools::load_all()
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
devtools::load_all()
devtools::load_all()
lineus_dev()
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Sepal.Width)
dev.off
dev.off()
devtools::load_all()
plot(
iris$Sepal.Length,
iris$Sepal.Width
)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width
)
lineus <- import_plotter()
dev.off()
lineus <- import_plotter()
lineus$connected()
lineus$g01(z = 100)
lineus$g01(z = 500)
lineus$g01(z = 1000)
lineus$g01(z = 2000)
lineus$g01(z = 250)
lineus$g01(z = 1000)
lineus$info
lineus$get_info()
lineus$list_lineus_files()
devtools::load_all()
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width
)
devtools::load_all()
dev.off
dev.off*
dev.off
dev.off()
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width
)
warnings()
dev.off()
devtools::load_all()
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width
)
dev.off()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = iris$Species
)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
iris$Species
)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
shape = iris$Species
)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.factor(iris$Species)
)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.factor(iris$Species)
)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = 1)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = 2)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = 3)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
dev.off()
scale_value(1:10, canvas = c(0,50,0,50))
?sapply(list, function)
sapply(list, function)
?sapply(list, function)
?sapply
?mapply
devtools::load_all()
devtools::load_all()
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
dev.off()
lineus$g01(z=z_dn)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
dev.off()
lineus$g01(z=z_dn)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
lineus$g01(z=z_up)
lineus$g01(z=z_up)
dev.off()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus$g01(z=z_up)
devtools::load_all()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus$g01(z=z_up)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species)),
cex = 5
)
dev.off()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species)),
cex = 5
)
warnings()
devtools::load_all()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species)),
cex = 5
)
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
dev.off()
plot(mtcars)
plot(mtcars$wt, mpg$drat)
plot(mtcars$wt, mtcars$drat)
mtcars
mtcars$am *2 +1
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
devtools::load_all()
lineus$g01(z=z_dn)
lineus$g01(z=z_up)
lineus_dev()
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
dev.off()
devtools::load_all()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus_dev()
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
dev.off()
devtools::load_all()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus_dev()
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
mtcars
lineaus$connect()
lineus$connect()
lineus$get_info()
lineus_dev()
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
dev.off()
lineus$g01(0,0)
lineus$g01(0,0)
lineus$g01(650,0)
lineus$g01(650,-1000)
lineus$g01(650,-1000)
lineus$g01(650,1000)
lineus$g01(1775,1000)
?akima::interp()
?akima::bilinear()
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
xlim = c(min_x, max_x),
y_lim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
z_01 <- 210
z_11 <- 350
z_00 <- 520
z_10 <- 860
min_x = 650
max_x = 1775
min_y = -1000
max_y = 1000
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
# xlim = c(min_x, max_x),
# ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
debug(akima::bilinear.grid)
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
# xlim = c(min_x, max_x),
# ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
dim(z)
z
?dim
array(c(z_01, z_11, z_00, z_10))
dim(array(c(z_01, z_11, z_00, z_10)))
dim(matrix(c(z_01, z_11, z_00, z_10)))
dim(matrix(c(z_01, z_11, z_00, z_10), nrow = 2))
matrix(c(z_01, z_11, z_00, z_10), nrow = 2)
matrix(c(z_00, z_11, z_00, z_10), nrow = 2)
matrix(c(z_00, z_01, z_00, z_10), nrow = 2)
matrix(c(z_00, z_01, z_10, z_11), nrow = 2)
akima::bilinear.grid(
x = c(min_x, max_x),
y = c(min_y, max_y),
z = matrix(c(z_00, z_01, z_10, z_11), nrow = 2),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
undebug(akima::bilinear.grid)
akima::bilinear.grid(
x = c(min_x, max_x),
y = c(min_y, max_y),
z = matrix(c(z_00, z_01, z_10, z_11), nrow = 2),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
z_mat <- akima::bilinear.grid(
x = c(min_x, max_x),
y = c(min_y, max_y),
z = matrix(c(z_00, z_01, z_10, z_11), nrow = 2),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
z_mat <- akima::bilinear.grid(
x = c(min_x, max_x),
y = c(min_y, max_y),
z = matrix(c(z_00, z_01, z_10, z_11), nrow = 2),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
# nx= length(min_x:max_x),
# ny= length(min_y:max_y)
dx = 1,
dy = 1
)
z_mat[750, 0]
z_mat[750, 0,]
matrix(z_mat[750, 0,])
matrix(z_mat)
z_df <- data.frame(z_mat)
z_df <- cbind(z_mat)
z_df[750,0]
z_df[750,0,]
z_df <- as.matrix(z_mat)
z_df[1,2]
z_df[750,0]
nrow(z_df)
dim(z_df)
runif(100)
matrix(runif(100), nrow = 20)
round(matrix(runif(100), nrow = 20))
devtools::load_all
devtools::load_all()
hello_world()
plotter
devtools::load_all()
hello_world()
devtools::load_all()
hello_world()
dev.off()
dev.off()
hello_world()
dev.off()
devtools::load_all()
hello_world()
devtools::load_all()
hello_world()
warnings()
dev.off()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
debug(draw)
devtools::load_all()
debug(draw)
hello_world()
z_mat
x
y
retrieve_z(x,y,z_mat)
debug(draw)
devtools::load_all()
hello_world()
devtools::load_all()
hello_world()
p <- import_plotter()
p$g01(z=z_dn)
p$g01(z=z_up)
hello_world()
debug(.rect)
hello_world()
debug(devoi)
debug(devout:::rdevice)
hello_world()
devtools::load_all()
hello_world()
Q
devtools::load_all()
hello_world()
?mapply
devtools::load_all()
hello_world()
devtools::load_all()
hello_world()

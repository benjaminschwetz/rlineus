iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
dev.off()
scale_value(1:10, canvas = c(0,50,0,50))
?sapply(list, function)
sapply(list, function)
?sapply(list, function)
?sapply
?mapply
devtools::load_all()
devtools::load_all()
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
dev.off()
lineus$g01(z=z_dn)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
dev.off()
lineus$g01(z=z_dn)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
lineus$g01(z=z_up)
lineus$g01(z=z_up)
dev.off()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus$g01(z=z_up)
devtools::load_all()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus$g01(z=z_up)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species))
)
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species)),
cex = 5
)
dev.off()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species)),
cex = 5
)
warnings()
devtools::load_all()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus_dev()
plot(
iris$Sepal.Length,
iris$Sepal.Width,
pch = as.numeric(as.factor(iris$Species)),
cex = 5
)
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
dev.off()
plot(mtcars)
plot(mtcars$wt, mpg$drat)
plot(mtcars$wt, mtcars$drat)
mtcars
mtcars$am *2 +1
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
devtools::load_all()
lineus$g01(z=z_dn)
lineus$g01(z=z_up)
lineus_dev()
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
dev.off()
devtools::load_all()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus_dev()
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
dev.off()
devtools::load_all()
lineus$g01(z=z_up)
lineus$g01(z=z_dn)
lineus_dev()
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
mtcars
lineaus$connect()
lineus$connect()
lineus$get_info()
lineus_dev()
plot(mtcars$wt, mtcars$drat,
pch = mtcars$am *2 +1,
cex = 4)
dev.off()
lineus$g01(0,0)
lineus$g01(0,0)
lineus$g01(650,0)
lineus$g01(650,-1000)
lineus$g01(650,-1000)
lineus$g01(650,1000)
lineus$g01(1775,1000)
?akima::interp()
?akima::bilinear()
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
xlim = c(min_x, max_x),
y_lim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
z_01 <- 210
z_11 <- 350
z_00 <- 520
z_10 <- 860
min_x = 650
max_x = 1775
min_y = -1000
max_y = 1000
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
# xlim = c(min_x, max_x),
# ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
debug(akima::bilinear.grid)
akima::bilinear.grid(
x = c(min_x, max_x, min_x, max_x),
y = c(max_y, max_y, min_y, min_y),
z = c(z_01, z_11, z_00, z_10),
# xlim = c(min_x, max_x),
# ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
dim(z)
z
?dim
array(c(z_01, z_11, z_00, z_10))
dim(array(c(z_01, z_11, z_00, z_10)))
dim(matrix(c(z_01, z_11, z_00, z_10)))
dim(matrix(c(z_01, z_11, z_00, z_10), nrow = 2))
matrix(c(z_01, z_11, z_00, z_10), nrow = 2)
matrix(c(z_00, z_11, z_00, z_10), nrow = 2)
matrix(c(z_00, z_01, z_00, z_10), nrow = 2)
matrix(c(z_00, z_01, z_10, z_11), nrow = 2)
akima::bilinear.grid(
x = c(min_x, max_x),
y = c(min_y, max_y),
z = matrix(c(z_00, z_01, z_10, z_11), nrow = 2),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
undebug(akima::bilinear.grid)
akima::bilinear.grid(
x = c(min_x, max_x),
y = c(min_y, max_y),
z = matrix(c(z_00, z_01, z_10, z_11), nrow = 2),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
z_mat <- akima::bilinear.grid(
x = c(min_x, max_x),
y = c(min_y, max_y),
z = matrix(c(z_00, z_01, z_10, z_11), nrow = 2),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
nx= length(min_x:max_x),
ny= length(min_y:max_y)
)
z_mat <- akima::bilinear.grid(
x = c(min_x, max_x),
y = c(min_y, max_y),
z = matrix(c(z_00, z_01, z_10, z_11), nrow = 2),
xlim = c(min_x, max_x),
ylim= c(min_y, max_y),
# nx= length(min_x:max_x),
# ny= length(min_y:max_y)
dx = 1,
dy = 1
)
z_mat[750, 0]
z_mat[750, 0,]
matrix(z_mat[750, 0,])
matrix(z_mat)
z_df <- data.frame(z_mat)
z_df <- cbind(z_mat)
z_df[750,0]
z_df[750,0,]
z_df <- as.matrix(z_mat)
z_df[1,2]
z_df[750,0]
nrow(z_df)
dim(z_df)
runif(100)
matrix(runif(100), nrow = 20)
round(matrix(runif(100), nrow = 20))
devtools::load_all
devtools::load_all()
hello_world()
plotter
devtools::load_all()
hello_world()
devtools::load_all()
hello_world()
dev.off()
dev.off()
hello_world()
dev.off()
devtools::load_all()
hello_world()
devtools::load_all()
hello_world()
warnings()
dev.off()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
warnings()
devtools::load_all()
hello_world()
debug(draw)
devtools::load_all()
debug(draw)
hello_world()
z_mat
x
y
retrieve_z(x,y,z_mat)
debug(draw)
devtools::load_all()
hello_world()
devtools::load_all()
hello_world()
p <- import_plotter()
p$g01(z=z_dn)
p$g01(z=z_up)
hello_world()
debug(.rect)
hello_world()
debug(devoi)
debug(devout:::rdevice)
hello_world()
devtools::load_all()
hello_world()
Q
devtools::load_all()
hello_world()
?mapply
devtools::load_all()
hello_world()
devtools::load_all()
hello_world()
devtools::load_all()
hello_world()
lineus <- import_plotter()
lineus$g01(z=dn)
lineus <- import_plotter()
lineus$g01(z=dn)
lineus$g01(z=0)
hello_world()
devtools::load_all()
hello_world()
lineus$get_info()
devtools::load_all()
hello_world()
fetch_z_map(lineus)
fetch_z_map(linus)
lineus <- import_plotter()
fetch_z_map(linus)
fetch_z_map(lineus)
debug(lineus_dev)
hello_world()
z_corners
z_mat$z
z_mat$z[1:10,1:10]
lineus$connect()
lineus$g01(650,-1000,0)
lineus$g01(650,-1000,1000)
str(lineus)
list(pl = lineus, config = 0)
lineus$connected()
lineus$disconnect()
x <- list( q = function(a){x$q <<-a})
x
x$q
x$q()
x$q(a)
x$q(1)
x
x <- list( q = function(a){x$q <<-1})
x <- list( q = function(a){x$q <<-1}())
x
x$q()
x$q
x
x <- list( q = runif())
x <- list( q = runif(1))
x
x <- list( q = expr(runif(1)))
x <- list( q = expression(runif(1)))
x
x$q
?lazyLoad()
x
x <- list(a = rnorm(1))
x
?call
x <- list(a = call(rnorm(1)))
x <- list(a = call('rnorm(1)'))
x
x$a
x <- list(a = call('rnorm', 1))
x$a
do.call(x$a)
eval(x$a)
eval(5)
f <- function(){x$a <<- 1}
x$a <- call(f)
x$a <- call('f')
x
x$a
eval(x$a)
x
devtools::load_all()
devtools::load_all()
eval(py_lineus$cv)
devtools::load_all()
eval(py_lineus$cv)
devtools::load_all()
eval(py_lineus$cv)
Q
devtools::load_all()
eval(py_lineus$cv)
devtools::load_all()
eval(py_lineus$cv)
devtools::load_all()
devtools::load_all()
eval(py_lineus$cv)
devtools::load_all()
render_canvas()
str(py_lineus)
py_lineus$pl()
py_lineus$pl$connect()
devtools::load_all()
py_lineus$pl$LineUs$connect()
devtools::load_all()
devtools::load_all()
py_lineus
py_lineus$LineUs$connect()
devtools::load_all()
py_lineus
py_lineus$LineUs$connect()
lineus_dev()
dev.off()
devtools::load_all()
p <- import_plotter()
render_canvas(p)
p$disconnect()
devtools::load_all()
render_canvas(p)
devtools::load_all()
render_canvas(p)
devtools::load_all()
render_canvas(p)
devtools::load_all()
render_canvas(p)
p$connect()
render_canvas(p)
render_canvas(p,keep_con = T)
render_canvas(p,keep_con = F)
library(devout)
devout::verbose()
x <- seq(0,8*pi,length.out=100)
y <- sin(x)
plot(x,y,type="l")
dev.off()
devtools::load_all()
hello_world()
load_plotter()
rlineus::check_py_setup()
rlineus::import_plotter()
rlineus::import_plotter
install_py_lineus()
reticulate::import("lineus")
py_lineus <- reticulate::import("lineus")
py_lineus$diagnostics
py_lineus$diagnostics()
py_lineus$diagnostics
py_lineus$Diagnostics()
py_lineus$lineus
py_lineus$lineus()
py_lineus$lineus$ipaddress
py_lineus$lineus$ipaddress()
py_lineus$lineus$LineUs$connect
py_lineus$lineus$LineUs$connect()
py_lineus$LineUs()
py_lineus$LineUs()
py_lineus$LineUs()$connect()
py_lineus$LineUs$list_lineus_files
py_lineus$LineUs$list_lineus_files()
py_lineus$LineUs()$list_lineus_files()
py_lineus$LineUs()$connect()
x <- py_lineus$LineUs()
x
x$browser
reticulate::py_last_error()
?reticulate::import_from_path()
reticulate::py_discover_config()
?reticulate::py_install()
reticulate::use_python()
?reticulate::use_python()
reticulate::miniconda_path()
?reticulate::miniconda_path()
reticulate::py_eval("from lineus import LineUs")
?reticulate::py_eval("from lineus import LineUs")
?reticulate::py_run_string("from lineus import LineUs")
reticulate::py_run_string("from lineus import LineUs")
reticulate::py_run_string("my_line_us = LineUs()")
reticulate::py_run_string("my_line_us.connect()")
reticulate::py_run_string("1+1")
x <- reticulate::py_run_string("1+1")
x
x$my_line_us()
x$my_line_us$connect()
x$my_line_us$connect()
x$my_line_us$disconnect()
x$my_line_us$connect()
x$my_line_us$connect()
reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")
reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")$LineUs()
reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")$LineUs()$connect()
reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")$LineUs()$connect()
reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")$LineUs()$connect()
reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")$LineUs()$connect()
reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")$LineUs()$connect()
?reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")$LineUs()$connect()
?reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")
reticulate::conda_remove(,"lineus")
reticulate::conda_remove("r-miniconda","lineus")
reticulate::virtualenv_list()
reticulate::conda_list()
reticulate::conda_remove("r-reticulate","lineus")
reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")$LineUs()$connect()
reticulate::import_from_path("lineus", "/home/benjamin/python_projects/LineUsPythonModule/lineus")$LineUs()$connect()
